{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome to the Killarney Heights High School Coding and Robotics Site.</p>"},{"location":"Robotics/intro/","title":"Introduction","text":"<p>Robot come in all shapes and sizes. We can try different technologies like micro:bit, lego, arduino and Raspberry Pi to see which ones are easy to work with and what are their strengths and limitations. Types of robots we can try build are the line and rescue robots used for RoboCup Junior Australia, the robots built for the First Lego League Challenge or VEX Robotics Competitions</p>"},{"location":"Robotics/lego-ev3-bascis/","title":"LEGO EV3","text":""},{"location":"Robotics/lego-ev3-bascis/#imaging-micropython","title":"Imaging MicroPython","text":"<p>To program the LEGO EV3's we will be using MicroPython. The MicroSD cards have already been prepared. If there is an issue with the MicroSD they can be re-imaged using these instructions. You can read the full documentation and what some of the possibilities with the LEGO EV3s here.</p>"},{"location":"Robotics/lego-ev3-bascis/#pc-setup","title":"PC Setup","text":"<p>You will need to have installed on your PC VSCode and the EV3 MicroPython extension.</p> <p>Note</p> <p>I have had more success with Rufus as Etcher was corrupting the MicroSD and required a full reformat of the card to fix.</p>"},{"location":"Robotics/lego-ev3-bascis/#getting-started","title":"Getting Started","text":"<p>Follow these instructions to get started with the MicroPython MicroSD card.</p>"},{"location":"Robotics/lego-ev3-bascis/#building-a-bot","title":"Building a bot","text":"<ul> <li>Educator Bot</li> </ul>"},{"location":"Robotics/lego-ev3-bascis/#creating-and-running-a-program","title":"Creating and Running a Program","text":"<ul> <li>Creating and running programs</li> </ul>"},{"location":"Robotics/lego-ev3-bascis/#tutorials","title":"Tutorials","text":"<ul> <li>Basic Movement</li> <li>Obstacle Avoidance</li> <li>Line Following</li> </ul>"},{"location":"Robotics/microbit-basics/","title":"Micro:bit Basics","text":""},{"location":"Robotics/microbit-basics/#setup","title":"Setup","text":"<p>The easiest way to get started is to use the online tool from Microsoft https://makecode.microbit.org/ and try any of the Tutorials for the new micro:bit (v2). You can also find code below the demonstrates most of the sensors and features of the micro:bit.</p> <p>You can also follow the Getting Started tutorial which will get you connected with the Micro:bit.</p>"},{"location":"Robotics/microbit-basics/#hardware","title":"Hardware","text":""},{"location":"Robotics/microbit-basics/#sensors-and-features","title":"Sensors and Features","text":""},{"location":"Robotics/microbit-basics/#led-display","title":"LED Display","text":"<p>You can display messages and icons on the 5x5 display LEDS. </p> PythonJavascript <pre><code>def on_forever():\n    basic.show_string(\"Hello!\")\nbasic.forever(on_forever)\n</code></pre> <pre><code>basic.forever(function on_forever() {\n    basic.showString(\"Hello!\")\n})\n</code></pre> <p>Question</p> <p>Change the display to show an icon.</p>"},{"location":"Robotics/microbit-basics/#temperature-sensor","title":"Temperature Sensor","text":"PythonJavascript <pre><code>def on_forever():\n    if input.temperature() &gt; 25:\n        basic.show_icon(IconNames.SAD)\n    else:\n        basic.show_icon(IconNames.HAPPY)\nbasic.forever(on_forever)\n</code></pre> <pre><code>basic.forever(function () {\n    if (input.temperature() &gt; 25) {\n        basic.showIcon(IconNames.Sad)\n    } else {\n        basic.showIcon(IconNames.Happy)\n    }\n})\n</code></pre> <p>Question</p> <p>Can you make it play music when the temperature is at a comfortable level?</p>"},{"location":"Robotics/microbit-basics/#light-level","title":"Light Level","text":"PythonJavascript <pre><code>light_level = 0\n\ndef on_forever():\n    global light_level\n    light_level = input.light_level()\n    if light_level &gt; 100:\n        basic.show_icon(IconNames.GHOST)\n    else:\n        basic.show_icon(IconNames.ANGRY)\nbasic.forever(on_forever)    \n</code></pre> <pre><code>let light_level = 0\nbasic.forever(function on_forever() {\n\n    light_level = input.lightLevel()\n    if (light_level &gt; 100) {\n        basic.showIcon(IconNames.Ghost)\n    } else {\n        basic.showIcon(IconNames.Angry)\n    }\n\n})\n</code></pre>"},{"location":"Robotics/microbit-basics/#buttons","title":"Buttons","text":"<p>Pong was one of the first computer games you could play at home. This version you can play on the micro:bit against yourself. </p> PythonJavascript <pre><code>bar_x = 0\npoint = 0\ninterval = 0\ninterval_step = 0\nball_x = 0\nball_y = 0\nball_dx = 0\nball_dy = 0\nin_game = False\n\n# Move the bar left\ndef on_button_pressed_a():\n    global bar_x\n    if bar_x &gt; 0:\n        led.unplot(bar_x + 1, 4)\n        bar_x = bar_x - 1\n        led.plot(bar_x, 4)\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# Move the bar right\ndef on_button_pressed_b():\n    global bar_x\n    if bar_x &lt; 3:\n        led.unplot(bar_x, 4)\n        bar_x = bar_x + 1\n        led.plot(bar_x + 1, 4)\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\ndef on_forever():\n    global point, interval, interval_step, ball_x, ball_y, ball_dx, ball_dy, bar_x, in_game\n    point = 0\n    interval = 500\n    interval_step = 10\n    ball_x = 3\n    ball_y = 4\n    ball_dx = -1\n    ball_dy = -1\n    bar_x = 0\n    basic.show_string(\"GO!\")\n    led.plot(ball_x, ball_y)\n    led.plot(bar_x, 4)\n    led.plot(bar_x + 1, 4)\n    in_game = True\n    while in_game:\n        if ball_x + ball_dx &gt; 4:\n            ball_dx = ball_dx * -1\n        elif ball_x + ball_dx &lt; 0:\n            ball_dx = ball_dx * -1\n        if ball_y + ball_dy &lt; 0:\n            ball_dy = ball_dy * -1\n        elif ball_y + ball_dy &gt; 3:\n            if led.point(ball_x + ball_dx, ball_y + ball_dy):\n                ball_dy = ball_dy * -1\n                point = point + 1\n                if interval - interval_step &gt;= 0:\n                    interval = interval - interval_step\n            else:\n                in_game = False\n        if in_game:\n            led.plot(ball_x + ball_dx, ball_y + ball_dy)\n            led.unplot(ball_x, ball_y)\n            ball_x = ball_x + ball_dx\n            ball_y = ball_y + ball_dy\n            basic.pause(interval)\n        else:\n            game.set_score(point)\n            game.game_over()\nbasic.forever(on_forever)\n</code></pre> <pre><code>let bar_x = 0\nlet point = 0\nlet interval = 0\nlet interval_step = 0\nlet ball_x = 0\nlet ball_y = 0\nlet ball_dx = 0\nlet ball_dy = 0\nlet in_game = false\n\n//  Move the bar left\ninput.onButtonPressed(Button.A, function on_button_pressed_a() {\n\n    if (bar_x &gt; 0) {\n        led.unplot(bar_x + 1, 4)\n        bar_x = bar_x - 1\n        led.plot(bar_x, 4)\n    }\n\n})\n\n//  Move the bar right\ninput.onButtonPressed(Button.B, function on_button_pressed_b() {\n\n    if (bar_x &lt; 3) {\n        led.unplot(bar_x, 4)\n        bar_x = bar_x + 1\n        led.plot(bar_x + 1, 4)\n    }\n\n})\n\nbasic.forever(function on_forever() {\n\n    point = 0\n    interval = 500\n    interval_step = 10\n    ball_x = 3\n    ball_y = 4\n    ball_dx = -1\n    ball_dy = -1\n    bar_x = 0\n    basic.showString(\"GO!\")\n    led.plot(ball_x, ball_y)\n    led.plot(bar_x, 4)\n    led.plot(bar_x + 1, 4)\n    in_game = true\n    while (in_game) {\n        if (ball_x + ball_dx &gt; 4) {\n            ball_dx = ball_dx * -1\n        } else if (ball_x + ball_dx &lt; 0) {\n            ball_dx = ball_dx * -1\n        }\n\n        if (ball_y + ball_dy &lt; 0) {\n            ball_dy = ball_dy * -1\n        } else if (ball_y + ball_dy &gt; 3) {\n            if (led.point(ball_x + ball_dx, ball_y + ball_dy)) {\n                ball_dy = ball_dy * -1\n                point = point + 1\n                if (interval - interval_step &gt;= 0) {\n                    interval = interval - interval_step\n                }\n\n            } else {\n                in_game = false\n            }\n\n        }\n\n        if (in_game) {\n            led.plot(ball_x + ball_dx, ball_y + ball_dy)\n            led.unplot(ball_x, ball_y)\n            ball_x = ball_x + ball_dx\n            ball_y = ball_y + ball_dy\n            basic.pause(interval)\n        } else {\n            game.setScore(point)\n            game.gameOver()\n        }\n\n    }\n})\n</code></pre>"},{"location":"Robotics/microbit-basics/#network","title":"Network","text":"<p>Battleship is another classic game that you can play using 2 micro:bits</p> PythonJavascript <pre><code>hit_x = 0\nhit_y = 0\nindex = 0\nposition_y = 0\nposition_x = 0\nmy_battle_area: List[number] = []\nhit_count = 0\nfire_y = 0\nfire_x = 0\n# change this number and share it with the person you will play with\nradio.set_group(123)\nfire_x = 0\nfire_y = 1\nhit_count = 0\nmy_battle_area = []\n\n# setup the board\nfor index2 in range(25):\n    my_battle_area.append(0)\nnumber_of_ships = 5\nwhile number_of_ships &gt; 0:\n    position_x = randint(0, 4)\n    position_y = 1 + randint(0, 3)\n    index = position_x + 5 * position_y\n    if my_battle_area[index] == 0:\n        my_battle_area[index] = 1\n        led.plot(position_x, position_y)\n        number_of_ships += 0 - 1\n\n# set the y-axis for the cannon\ndef on_button_pressed_b():\n    global fire_y\n    fire_y = (fire_y + 1) % 5\n    if fire_y == 0:\n        fire_y = 1\ninput.on_button_pressed(Button.B, on_button_pressed_b)\n\n# set the x-axis for the cannon\ndef on_button_pressed_a():\n    global fire_x\n    fire_x = (fire_x + 1) % 5\ninput.on_button_pressed(Button.A, on_button_pressed_a)\n\n# fire the cannon\ndef on_button_pressed_ab():\n    global fire_x, fire_y\n    radio.send_number(fire_x + 5 * fire_y)\n    fire_x = 0\n    fire_y = 1\ninput.on_button_pressed(Button.AB, on_button_pressed_ab)\n\n# receive the cannon fire\ndef on_received_number(receivedNumber):\n    global hit_y, hit_x, hit_count\n    if receivedNumber &gt;= 0:\n        if my_battle_area[receivedNumber] == 1:\n            my_battle_area[receivedNumber] = 0\n            hit_y = Math.floor(receivedNumber / 5)\n            hit_x = receivedNumber - 5 * hit_y\n            led.unplot(hit_x, hit_y)\n            radio.send_number(-1)\n        else:\n            radio.send_number(-2)\n    elif receivedNumber == -1:\n        hit_count += 1\n        led.plot(0, 0)\n        led.unplot(4, 0)\n        if hit_count == 5:\n            basic.clear_screen()\n            while True:\n                basic.show_string(\"You win!\")\n    elif receivedNumber == -2:\n        led.plot(4, 0)\n        led.unplot(0, 0)\nradio.on_received_number(on_received_number)\n</code></pre> <pre><code>// receive the cannon fire\nradio.onReceivedNumber(function on_received_number(receivedNumber: number) {\n\n    if (receivedNumber &gt;= 0) {\n        if (my_battle_area[receivedNumber] == 1) {\n            my_battle_area[receivedNumber] = 0\n            hit_y = Math.floor(receivedNumber / 5)\n            hit_x = receivedNumber - 5 * hit_y\n            led.unplot(hit_x, hit_y)\n            radio.sendNumber(-1)\n        } else {\n            radio.sendNumber(-2)\n        }\n\n    } else if (receivedNumber == -1) {\n        hit_count += 1\n        led.plot(0, 0)\n        led.unplot(4, 0)\n        if (hit_count == 5) {\n            basic.clearScreen()\n            while (true) {\n                basic.showString(\"You win!\")\n            }\n        }\n\n    } else if (receivedNumber == -2) {\n        led.plot(4, 0)\n        led.unplot(0, 0)\n    }\n\n})\n\n// set the x-axis for the cannon\ninput.onButtonPressed(Button.A, function on_button_pressed_a() {\n\n    fire_x = (fire_x + 1) % 5\n})\n\n// fire the cannon\ninput.onButtonPressed(Button.AB, function on_button_pressed_ab() {\n\n    radio.sendNumber(fire_x + 5 * fire_y)\n    fire_x = 0\n    fire_y = 1\n})\n\n// set the y-axis for the cannon\ninput.onButtonPressed(Button.B, function on_button_pressed_b() {\n\n    fire_y = (fire_y + 1) % 5\n    if (fire_y == 0) {\n        fire_y = 1\n    }\n\n})\n\n// init variables\nlet hit_x = 0\nlet hit_y = 0\nlet index = 0\nlet position_y = 0\nlet position_x = 0\nlet my_battle_area : number[] = []\nlet hit_count = 0\nlet fire_y = 0\nlet fire_x = 0\n\n// change this number and share it with the person you will play with\nradio.setGroup(123)\nfire_x = 0\nfire_y = 1\nhit_count = 0\nmy_battle_area = []\n\n// setup the board\nfor (let index2 = 0; index2 &lt; 25; index2++) {\n    my_battle_area.push(0)\n}\nlet number_of_ships = 5\nwhile (number_of_ships &gt; 0) {\n    position_x = randint(0, 4)\n    position_y = 1 + randint(0, 3)\n    index = position_x + 5 * position_y\n    if (my_battle_area[index] == 0) {\n        my_battle_area[index] = 1\n        led.plot(position_x, position_y)\n        number_of_ships += 0 - 1\n    }\n\n}\n</code></pre> <p>Question</p> <p>Will this work if one person writes their code in python and the other in javascript?</p>"},{"location":"Robotics/microbit-development/","title":"Micro:bit Development","text":""},{"location":"Robotics/microbit-development/#makecode","title":"MakeCode","text":"<p>The easiest solution to get started is using MakeCode. Once you have signed in you can run the simulator to test your code before uploading it to your micro:bit. You can also download a copy of the </p> <p>To connect a micro:bit to MakeCode, you can use a USB cable to transfer code or data: </p> <ol> <li>Connect the micro:bit to your computer's USB port using a micro-USB cable. </li> <li>Open MakeCode for micro:bit in your browser. </li> <li>Click the purple Download button in the lower left of the MakeCode screen. </li> <li>Select Pair. </li> <li>A browser pop-up will let you select your micro:bit and then click Connect. </li> <li>Select Download and the code will transfer to your micro:bit</li> </ol>"},{"location":"Robotics/microbit-development/#sharing-projects","title":"Sharing Projects","text":"<p>How to share projects is details here.</p>"},{"location":"Robotics/microbit-development/#pros","title":"Pros","text":"<ul> <li>Easy to get started</li> <li>Good supporting projects and lots of online documents.</li> <li>Convert between block, python and javascript with the click of a button</li> <li>Built in simulator to test your code</li> </ul>"},{"location":"Robotics/microbit-development/#cons","title":"Cons","text":"<ul> <li>Single developer only. No pair programming unless you want to share your projects.</li> </ul>"},{"location":"Robotics/microbit-development/#micropython","title":"MicroPython","text":"<p>MicroPython also has an IDE for the web. </p>"},{"location":"Robotics/microbit-development/#pros_1","title":"Pros","text":"<ul> <li>MicroPython is support on ESP32 chips and Raspberry Pi giving you more choices for hardware</li> <li>Good documentation</li> <li>Online IDE is easy to use</li> <li>MicroPython is more similar to Python</li> </ul>"},{"location":"Robotics/microbit-development/#cons_1","title":"Cons","text":"<ul> <li>This will flash the micro:bit to run effectively a different operating system. (It can be changed back)</li> <li>Different version of Python to MakeCode</li> <li>Some addons may not be supported or require open source solutions</li> <li>No official extensions for VSCode</li> </ul>"},{"location":"Robotics/microbit-development/#visual-studio-code-vscode","title":"Visual Studio Code (VSCode)","text":"<p>There a 2 main solutions to use a micro:bit with VSCode. </p> <ol> <li>Use MicroPython (recommended)</li> <li>Use MakeCode cli (not recommended)</li> </ol>"},{"location":"Robotics/microbit-development/#micropython_1","title":"MicroPython","text":"<p>There is no official extension for VSCode but several users have created their own. I have tried micro:bit Statped which has worked for me. The instructions for getting it setup are in the link.</p> <p>The above is currently not working due to how the Micropython kernel is compiled.</p> <p>The work around is to use the MicroPython website at https://python.microbit.org/</p> <ol> <li>Create a new project</li> <li>Create a new file and name it <code>macqueen.py</code></li> <li>Copy the the code from maqueen micropython into the file.</li> <li>In the main.py file add the following code which is enough to get you started. </li> </ol> <pre><code>import microbit\nimport maqueen\nmq = maqueen.Maqueen()\n\nwhile True:\n    mq.set_led(0, 1)\n    microbit.sleep(1000)\n    mq.set_led(1, 1)\n    mq.set_led(0, 0)\n    microbit.sleep(1000)\n    mq.set_led(1, 0)\n    for i in range(0, 10):\n        print(\"Distance: %d\" % mq.read_distance())\n\n    microbit.sleep(1000)\n\n    for i in range(0, 10):\n           l = mq.read_patrol(0)\n           p = mq.read_patrol(1)\n           print(\"Patrol: %d %d\" % (l, p))\n           microbit.sleep(1000)\n\n    d = [-100, 50, 20, -200, 200, 40]\n    for i in d:\n        mq.set_motor(0, i)\n        microbit.sleep(1000)\n        mq.set_motor(1, i)\n        microbit.sleep(1000)\n\n    mq.motor_stop_all()\n</code></pre>"},{"location":"Robotics/microbit-development/#makecode_1","title":"MakeCode","text":"<p>There are a sequence of instructions that require node.js to be install and the majority of the effort requires you to use the cli (command line interpreter) with pxt files.     - https://makecode.microbit.org/code     - https://makecode.com/cli</p> <p>Warning</p> <p>This is not recommended</p>"},{"location":"Robotics/microbit-maqueen/","title":"Micro:bit Maqueen","text":""},{"location":"Robotics/microbit-maqueen/#micromaqueen","title":"micro:Maqueen","text":""},{"location":"Robotics/microbit-maqueen/#tutorials","title":"Tutorials","text":"<p>Note</p> <p>These tutorials use block code. Block code is a good starting place if you have never coded but if you have some experience in coding it is better to understand and develop in a coding language like Python or Javascript with these bots. It is also possible to use other languages but check with your teacher before flashing the micro:bit.</p> <ul> <li>I am Maqueen</li> </ul>"},{"location":"Robotics/microbit-maqueen/#python-api","title":"Python API","text":"<ul> <li>Maqueen</li> </ul>"},{"location":"Robotics/microbit-maqueen/#control-motor","title":"Control Motor","text":"<p>Control Maqueen's speed and movement.</p> Motor Code Left maqueen.aMotors.M1 Right maqueen.aMotors.M2 Direction Code Forward maqueen.Dir.CW Backward maqueen.Dir.CCW <p>Speed: 0 - 255</p> Example<pre><code>maqueen.motor_run(maqueen.aMotors.M1, maqueen.Dir.CW, 0)\n</code></pre> API<pre><code>def maqueen.motor_run(index: aMotors, direction: Dir, speed: int) -&gt; None\n</code></pre>"},{"location":"Robotics/microbit-maqueen/#stop-motor","title":"Stop Motor","text":"<p>Stop a motor. The same as setting the motor speed to 0.</p> Motor Code Left maqueen.aMotors.M1 Right maqueen.aMotors.M2 Example<pre><code>maqueen.motor_stop(maqueen.aMotors.M1)\n</code></pre> API<pre><code>def maqueen.motor_run(motors: aMotors) -&gt; None\n</code></pre>"},{"location":"Robotics/microbit-maqueen/#stop-all-motors","title":"Stop All Motors","text":"<p>Stop all motors. The same as setting M1 and M2 speed to 0.</p> Example<pre><code>maqueen.motor_stop_all()\n</code></pre> API<pre><code>def maqueen.motor_stop_all() -&gt; None\n</code></pre>"},{"location":"Robotics/microbit-maqueen/#ultrasonic-sensor","title":"Ultrasonic Sensor","text":"<p>Return the distance in centimetres or microseconds to a detected object.</p> PingUnit Code Notes Centimetres PingUnit.CENTIMETERS Microseconds PingUnit.MICRO_SECONDS The smaller the microseconds, the closer the object Example<pre><code>    maqueen.sensor(PingUnit.CENTIMETERS)\n</code></pre> API<pre><code>def maqueen.sensor(unit: PingUnit) -&gt; int\n</code></pre>"},{"location":"Robotics/microbit-maqueen/#line-tracking-sensor","title":"Line Tracking Sensor","text":"<p>Read the value of the line-tracking sensor on the bottom of the Maqueen car. </p> Return Value Description 0 Black is detected 1 White is detected Patrol Code Left sensor maqueen.Patrol.PATROL_LEFT Right sensor maqueen.Patrol.PATROL_RIGHT Example<pre><code>maqueen.read_patrol(maqueen.Patrol.PATROL_LEFT)\n</code></pre> API<pre><code>def maqueen.read_patrol(patrol: Patrol) -&gt; int\n</code></pre>"},{"location":"Robotics/microbit-maqueen/#maqueen-plus","title":"Maqueen Plus","text":""},{"location":"Robotics/microbit-maqueen/#tutorials_1","title":"Tutorials","text":"<p>Note</p> <p>These tutorials use block code. Block code is a good starting place if you have never coded but if you have some experience in coding it is better to understand and develop in a coding language like Python or Javascript with these bots. It is also possible to use other languages but check with your teacher before flashing the micro:bit.</p> <ul> <li>Maqueen Plus V2 Getting started Tutorial</li> <li>Introduction to Maqueen Plus V2 | Maqueen Plus V2 Getting started Tutorial 01</li> <li>Let's move, Maqueen! | Maqueen Plus V2 Getting started Tutorial 02</li> </ul>"},{"location":"Robotics/microbit-maqueen/#python-api_1","title":"Python API","text":"<ul> <li>Maqueen Plus V2</li> </ul>"}]}